---
description: 
globs: src/infrastructure/**/*.ts
alwaysApply: false
---
# Infrastructure Layer (Data Layer)

## Overview
The Infrastructure Layer is responsible for external communications, data persistence, and integration with third-party services. It implements interfaces defined in the Domain Layer and provides concrete implementations for data access, API communication, local storage, and external services.

## Directory Structure
```
src/
└── infrastructure/
    ├── api/                # API client configuration and setup
    │   ├── client/         # Base client setup (axios, fetch, etc.)
    │   ├── endpoints/      # API endpoint definitions
    │   └── mock/           # Mock API responses for testing
    ├── repositories/       # Concrete implementations of domain repository interfaces
    ├── http/               # HTTP utilities (axios/fetch configurations)
    ├── storage/            # Local storage adapters
    ├── mappers/            # Data transformation between API and domain formats
    └── adapters/           # Adapters for third-party services
```

## Strict Rules and Guidelines

### 1. Repository Implementation

- **Implementation Approach**
  - Repositories MUST be implemented as classes (preferred) that implement domain interfaces
  - Repository classes SHOULD follow object-oriented design principles
  - Repository classes SHOULD inject their dependencies
  - Alternative functional implementations SHOULD be appropriately documented

- **Interface Compliance**
  - Each repository MUST implement an interface defined in the Domain Layer
  - Repository methods MUST have the same signatures as defined in interfaces
  - Repositories MUST NOT expose additional methods not in the interfaces
  - Implementation details MUST NOT leak outside of repositories

- **Separation of Concerns**
  - Repositories MUST handle data transformation between API and domain formats
  - Repositories MUST abstract away the details of HTTP requests or storage
  - Repositories MUST NOT contain business logic
  - Repositories MUST NOT directly modify UI state

- **Error Handling**
  - Infrastructure errors MUST be translated to domain errors when appropriate
  - HTTP status codes SHOULD be mapped to relevant domain error types
  - Connection errors SHOULD be handled gracefully
  - Repositories SHOULD implement retry logic for transient failures

- **Testability**
  - Repositories MUST be testable with mock HTTP clients
  - External dependencies SHOULD be injected, not directly instantiated
  - Side effects SHOULD be isolated and controllable in tests
  - Repositories SHOULD use interfaces for their dependencies

### 2. API Client Design

- **Implementation Pattern**
  - API clients SHOULD be implemented as classes with clear interfaces
  - API client classes SHOULD follow the single responsibility principle
  - API clients SHOULD use dependency injection for configuration and HTTP clients
  - API client methods SHOULD have clear return types and error handling

- **Centralized Configuration**
  - Create a centralized API client to handle common concerns
  - Base URL configuration MUST be configurable per environment
  - Authentication handling SHOULD be consistent across all endpoints
  - Error handling SHOULD be handled at the client level

- **Request/Response Interception**
  - Implement request interceptors for:
    - Adding auth headers
    - Request logging
    - Request transformation
  - Implement response interceptors for:
    - Error handling
    - Response transformation
    - Response logging
    - Session management

- **Organization**
  - API endpoints SHOULD be organized by domain (e.g., TaskApi, UserApi classes)
  - API response types MUST be defined separately from domain entities
  - API request types SHOULD be defined explicitly
  - HTTP methods SHOULD be used appropriately (GET, POST, PUT, DELETE)

- **Security**
  - Sensitive data MUST NOT be logged
  - Credentials MUST be securely stored
  - Use HTTPS for all production API calls
  - Implement CSRF protection for cookie-based auth

### 3. Data Transformation

- **Mapper Pattern**
  - Create mapper classes to transform between API models and domain models
  - Mapper classes SHOULD use static methods for transformations
  - Mappers SHOULD be pure functions
  - Mappers SHOULD handle null/undefined values gracefully
  - Mappers SHOULD preserve all required business data

- **Type Safety**
  - Use TypeScript types for both API and domain models
  - Validate data before transformation when needed
  - Handle edge cases like missing fields or unexpected formats
  - Ensure proper date and number format conversions

- **Naming Conventions**
  - Mapper class methods SHOULD follow consistent naming:
    - `mapToDomain(apiModel)`
    - `mapToApi(domainModel)`
  - API models SHOULD be suffixed with `ApiModel` or `Dto`
  - Mapper classes SHOULD be grouped by entity in separate files

### 4. Storage Adapters

- **Implementation Pattern**
  - Storage adapters SHOULD be implemented as classes with clear interfaces
  - Storage adapters SHOULD follow the adapter design pattern
  - Storage classes SHOULD be injectable and configurable
  - Consider implementing a Storage interface for swappable implementations

- **Abstraction**
  - Create adapter classes for browser storage (localStorage, sessionStorage)
  - Abstract storage behind domain-aligned interfaces
  - Storage adapters SHOULD handle serialization/deserialization
  - Implement fallbacks for when storage is unavailable

- **Security**
  - NEVER store sensitive information in localStorage
  - Consider encryption for semi-sensitive local data
  - Implement storage quotas and cleanup strategies
  - Handle storage errors gracefully

- **Organization**
  - Group storage by domain concern
  - Use consistent key naming conventions
  - Implement versioning for stored data structures
  - Consider time-to-live (TTL) for cached data

### 5. Third-Party Integrations

- **Implementation Pattern**
  - Third-party integrations SHOULD be implemented as adapter classes
  - Adapter classes SHOULD implement domain interfaces
  - Adapter classes SHOULD encapsulate all third-party specifics
  - Consider factory patterns for creating appropriate adapters

- **Adapter Pattern**
  - Create adapter classes for third-party services
  - Expose domain-aligned interfaces for these services
  - Hide third-party implementation details behind adapters
  - Make third-party services replaceable

- **Configuration**
  - External service configuration SHOULD be environment-specific
  - Credentials SHOULD NOT be hardcoded
  - Service endpoints SHOULD be configurable
  - Implement timeouts for all external calls

## Implementation Examples

### API Client Example (Class-Based)

```tsx
// api/client/ApiClient.ts
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { AuthTokenStorage } from '@/infrastructure/storage/AuthTokenStorage';
import { UnauthorizedError, NetworkError, ServerError } from '@/domain/errors/ApiErrors';

export interface ApiClientConfig {
  baseURL: string;
  timeout?: number;
  headers?: Record<string, string>;
}

export class ApiClient {
  private readonly client: AxiosInstance;
  private readonly authTokenStorage: AuthTokenStorage;
  
  constructor(
    config: ApiClientConfig,
    authTokenStorage: AuthTokenStorage
  ) {
    this.authTokenStorage = authTokenStorage;
    
    this.client = axios.create({
      baseURL: config.baseURL,
      timeout: config.timeout || 10000,
      headers: {
        'Content-Type': 'application/json',
        ...config.headers
      }
    });
    
    this.setupInterceptors();
  }
  
  private setupInterceptors(): void {
    // Request interceptor - add auth token
    this.client.interceptors.request.use(
      (config) => {
        const token = this.authTokenStorage.getToken();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );
    
    // Response interceptor - transform errors
    this.client.interceptors.response.use(
      (response: AxiosResponse) => response,
      (error: AxiosError) => {
        if (!error.response) {
          // Network error
          return Promise.reject(new NetworkError('Network error occurred'));
        }
        
        const { status, data } = error.response;
        
        switch (status) {
          case 401:
            return Promise.reject(new UnauthorizedError('Authentication required'));
          case 403:
            return Promise.reject(new UnauthorizedError('Insufficient permissions'));
          case 404:
            return Promise.reject(new Error('Resource not found'));
          case 500:
            return Promise.reject(new ServerError('Server error occurred'));
          default:
            return Promise.reject(
              new Error(data?.message || `Request failed with status code ${status}`)
            );
        }
      }
    );
  }
  
  async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await this.client.get<T>(url, config);
    return response.data;
  }
  
  async post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    const response = await this.client.post<T>(url, data, config);
    return response.data;
  }
  
  async put<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    const response = await this.client.put<T>(url, data, config);
    return response.data;
  }
  
  async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await this.client.delete<T>(url, config);
    return response.data;
  }
}

// Create and export default instance
export const createDefaultApiClient = (): ApiClient => {
  const baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';
  const authTokenStorage = new AuthTokenStorage();
  
  return new ApiClient({ baseURL }, authTokenStorage);
};
```

### API Endpoints Example (Class-Based)

```tsx
// api/endpoints/TaskApi.ts
import { ApiClient } from '../client/ApiClient';
import { TaskApiResponse, TaskCreateRequest, TaskUpdateRequest } from '../types/taskApiTypes';
import { TaskMapper } from '@/infrastructure/mappers/TaskMapper';
import { Task } from '@/domain/entities/Task';

export class TaskApi {
  private readonly basePath = '/tasks';
  
  constructor(private readonly apiClient: ApiClient) {}
  
  async getAllTasks(): Promise<Task[]> {
    const response = await this.apiClient.get<TaskApiResponse[]>(this.basePath);
    return response.map(TaskMapper.mapToDomain);
  }
  
  async getTaskById(id: string): Promise<Task> {
    const response = await this.apiClient.get<TaskApiResponse>(`${this.basePath}/${id}`);
    return TaskMapper.mapToDomain(response);
  }
  
  async createTask(task: Omit<Task, 'id'>): Promise<Task> {
    const requestData = TaskMapper.mapToApi(task);
    const response = await this.apiClient.post<TaskApiResponse>(this.basePath, requestData);
    return TaskMapper.mapToDomain(response);
  }
  
  async updateTask(id: string, updates: Partial<Omit<Task, 'id'>>): Promise<Task> {
    const requestData = TaskMapper.mapToApi(updates as Task, true);
    const response = await this.apiClient.put<TaskApiResponse>(`${this.basePath}/${id}`, requestData);
    return TaskMapper.mapToDomain(response);
  }
  
  async deleteTask(id: string): Promise<void> {
    await this.apiClient.delete(`${this.basePath}/${id}`);
  }
}
```

### Repository Implementation Example (Class-Based)

```tsx
// repositories/TaskRepositoryImpl.ts
import { Task } from '@/domain/entities/Task';
import { TaskRepository, TaskSearchCriteria } from '@/domain/interfaces/TaskRepository';
import { TaskApi } from '../api/endpoints/TaskApi';
import { TaskNotFoundError, TaskUpdateError } from '@/domain/errors/TaskErrors';

export class TaskRepositoryImpl implements TaskRepository {
  constructor(private readonly taskApi: TaskApi) {}
  
  async getAllTasks(): Promise<Task[]> {
    try {
      return await this.taskApi.getAllTasks();
    } catch (error) {
      // Transform infrastructure errors to domain errors
      this.handleError(error);
      throw error;
    }
  }
  
  async searchTasks(criteria: TaskSearchCriteria): Promise<Task[]> {
    try {
      const allTasks = await this.taskApi.getAllTasks();
      
      // Apply filters based on criteria
      return allTasks.filter(task => {
        if (criteria.completed !== undefined && task.completed !== criteria.completed) {
          return false;
        }
        
        if (criteria.priority && task.priority !== criteria.priority) {
          return false;
        }
        
        if (criteria.dueBefore && task.dueDate) {
          const dueDate = new Date(task.dueDate);
          const beforeDate = new Date(criteria.dueBefore);
          if (dueDate > beforeDate) {
            return false;
          }
        }
        
        if (criteria.dueAfter && task.dueDate) {
          const dueDate = new Date(task.dueDate);
          const afterDate = new Date(criteria.dueAfter);
          if (dueDate < afterDate) {
            return false;
          }
        }
        
        if (criteria.tags && criteria.tags.length > 0) {
          // At least one tag must match
          if (!criteria.tags.some(tag => task.tags.includes(tag))) {
            return false;
          }
        }
        
        return true;
      });
    } catch (error) {
      this.handleError(error);
      throw error;
    }
  }
  
  async getTaskById(id: string): Promise<Task | null> {
    try {
      return await this.taskApi.getTaskById(id);
    } catch (error) {
      if (error instanceof Error && error.message.includes('not found')) {
        return null;
      }
      this.handleError(error);
      throw error;
    }
  }
  
  async createTask(task: Omit<Task, 'id'>): Promise<Task> {
    try {
      return await this.taskApi.createTask(task);
    } catch (error) {
      this.handleError(error);
      throw error;
    }
  }
  
  async updateTask(id: string, updates: Partial<Omit<Task, 'id'>>): Promise<Task> {
    try {
      // First check if task exists
      const existingTask = await this.getTaskById(id);
      if (!existingTask) {
        throw new TaskNotFoundError(id);
      }
      
      return await this.taskApi.updateTask(id, updates);
    } catch (error) {
      if (error instanceof TaskNotFoundError) {
        throw error;
      }
      
      this.handleError(error, id);
      throw error;
    }
  }
  
  async deleteTask(id: string): Promise<void> {
    try {
      await this.taskApi.deleteTask(id);
    } catch (error) {
      this.handleError(error, id);
      throw error;
    }
  }
  
  private handleError(error: unknown, taskId?: string): void {
    if (error instanceof Error) {
      if (error.message.includes('Authentication required')) {
        throw new UnauthorizedError('Authentication required to access tasks');
      }
      
      if (error.message.includes('not found') && taskId) {
        throw new TaskNotFoundError(taskId);
      }
      
      if (taskId) {
        throw new TaskUpdateError(taskId, error.message);
      }
    }
  }
}
```

### API Type Definitions Example

```tsx
// api/types/taskApiTypes.ts
export interface TaskApiResponse {
  id: string;
  title: string;
  description?: string;
  completed: boolean;
  priority: string;
  created_at: string; // Snake case in API
  due_date?: string | null;
  tags: string[];
}

export interface TaskCreateRequest {
  title: string;
  description?: string;
  priority: string;
  due_date?: string | null;
  tags?: string[];
}

export interface TaskUpdateRequest {
  title?: string;
  description?: string;
  completed?: boolean;
  priority?: string;
  due_date?: string | null;
  tags?: string[];
}
```

### Data Mapper Example (Class-Based)

```tsx
// mappers/TaskMapper.ts
import { Task } from '@/domain/entities/Task';
import { TaskApiResponse, TaskCreateRequest, TaskUpdateRequest } from '../api/types/taskApiTypes';

export class TaskMapper {
  static mapToDomain(apiModel: TaskApiResponse): Task {
    return {
      id: apiModel.id,
      title: apiModel.title,
      description: apiModel.description,
      completed: apiModel.completed,
      priority: apiModel.priority as 'high' | 'medium' | 'low',
      createdAt: apiModel.created_at,
      dueDate: apiModel.due_date,
      tags: apiModel.tags || []
    };
  }
  
  static mapToApi(domainModel: Task | Partial<Task>, isUpdate = false): TaskCreateRequest | TaskUpdateRequest {
    if (isUpdate) {
      const updateRequest: TaskUpdateRequest = {};
      
      if (domainModel.title !== undefined) updateRequest.title = domainModel.title;
      if (domainModel.description !== undefined) updateRequest.description = domainModel.description;
      if (domainModel.completed !== undefined) updateRequest.completed = domainModel.completed;
      if (domainModel.priority !== undefined) updateRequest.priority = domainModel.priority;
      if (domainModel.dueDate !== undefined) updateRequest.due_date = domainModel.dueDate;
      if (domainModel.tags !== undefined) updateRequest.tags = domainModel.tags;
      
      return updateRequest;
    }
    
    // For creating a new Task
    return {
      title: domainModel.title!,
      description: domainModel.description,
      priority: domainModel.priority!,
      due_date: domainModel.dueDate,
      tags: domainModel.tags
    };
  }
}
```

### Storage Adapter Example (Class-Based)

```tsx
// storage/AuthTokenStorage.ts
import { StorageKeys } from './StorageKeys';

export class AuthTokenStorage {
  private readonly tokenKey = StorageKeys.AUTH_TOKEN;
  
  getToken(): string | null {
    if (typeof window === 'undefined') {
      return null; // Running on server
    }
    
    return localStorage.getItem(this.tokenKey);
  }
  
  saveToken(token: string): void {
    if (typeof window === 'undefined') {
      return; // Running on server
    }
    
    localStorage.setItem(this.tokenKey, token);
  }
  
  removeToken(): void {
    if (typeof window === 'undefined') {
      return; // Running on server
    }
    
    localStorage.removeItem(this.tokenKey);
  }
  
  hasToken(): boolean {
    return !!this.getToken();
  }
}
```

### Generic Storage Adapter Example (Class-Based)

```tsx
// storage/LocalStorageAdapter.ts
export interface Storage<T> {
  get(key: string): T | null;
  set(key: string, value: T): void;
  remove(key: string): void;
  clear(): void;
}

export class LocalStorageAdapter<T> implements Storage<T> {
  private readonly prefix: string;
  
  constructor(prefix: string = '') {
    this.prefix = prefix ? `${prefix}_` : '';
  }
  
  get(key: string): T | null {
    if (typeof window === 'undefined') {
      return null; // Running on server
    }
    
    const fullKey = this.getFullKey(key);
    const item = localStorage.getItem(fullKey);
    
    if (!item) {
      return null;
    }
    
    try {
      return JSON.parse(item) as T;
    } catch (error) {
      console.error(`Error parsing stored item for key ${key}:`, error);
      return null;
    }
  }
  
  set(key: string, value: T): void {
    if (typeof window === 'undefined') {
      return; // Running on server
    }
    
    const fullKey = this.getFullKey(key);
    
    try {
      const serialized = JSON.stringify(value);
      localStorage.setItem(fullKey, serialized);
    } catch (error) {
      console.error(`Error storing item for key ${key}:`, error);
    }
  }
  
  remove(key: string): void {
    if (typeof window === 'undefined') {
      return; // Running on server
    }
    
    const fullKey = this.getFullKey(key);
    localStorage.removeItem(fullKey);
  }
  
  clear(): void {
    if (typeof window === 'undefined') {
      return; // Running on server
    }
    
    // Only clear items with our prefix
    if (this.prefix) {
      const keys = Object.keys(localStorage);
      keys.forEach(key => {
        if (key.startsWith(this.prefix)) {
          localStorage.removeItem(key);
        }
      });
    }
  }
  
  private getFullKey(key: string): string {
    return `${this.prefix}${key}`;
  }
}
```

### Third-Party Adapter Example (Class-Based)

```tsx
// adapters/PaymentGatewayAdapter.ts
import { PaymentGateway, PaymentRequest, PaymentResponse } from '@/domain/interfaces/PaymentGateway';
import { PaymentError } from '@/domain/errors/PaymentErrors';
import { StripeClient } from 'stripe-client'; // Example external dependency

export class StripePaymentGatewayAdapter implements PaymentGateway {
  private readonly stripeClient: any; // StripeClient
  
  constructor(apiKey: string) {
    this.stripeClient = new StripeClient(apiKey);
  }
  
  async processPayment(request: PaymentRequest): Promise<PaymentResponse> {
    try {
      // Map domain payment request to Stripe-specific format
      const stripePaymentIntent = await this.stripeClient.paymentIntents.create({
        amount: this.convertToCents(request.amount),
        currency: request.currency.toLowerCase(),
        payment_method: request.paymentMethodId,
        confirm: true,
        description: request.description
      });
      
      // Map Stripe response back to domain model
      return {
        id: stripePaymentIntent.id,
        status: this.mapPaymentStatus(stripePaymentIntent.status),
        amount: request.amount,
        currency: request.currency,
        createdAt: new Date(stripePaymentIntent.created * 1000).toISOString()
      };
    } catch (error) {
      // Transform Stripe errors to domain errors
      if (error instanceof Error) {
        throw new PaymentError(`Payment processing failed: ${error.message}`);
      }
      throw new PaymentError('Unknown payment processing error');
    }
  }
  
  async getPaymentStatus(paymentId: string): Promise<string> {
    try {
      const stripePaymentIntent = await this.stripeClient.paymentIntents.retrieve(paymentId);
      return this.mapPaymentStatus(stripePaymentIntent.status);
    } catch (error) {
      if (error instanceof Error) {
        throw new PaymentError(`Failed to retrieve payment status: ${error.message}`);
      }
      throw new PaymentError('Unknown error retrieving payment status');
    }
  }
  
  private convertToCents(amount: number): number {
    return Math.round(amount * 100);
  }
  
  private mapPaymentStatus(stripeStatus: string): string {
    switch (stripeStatus) {
      case 'succeeded':
        return 'completed';
      case 'requires_payment_method':
        return 'failed';
      case 'requires_action':
        return 'pending_action';
      case 'processing':
        return 'processing';
      default:
        return 'unknown';
    }
  }
}
```

## Anti-Patterns to Avoid

1. ❌ **Direct API Implementation in Repository**
   ```tsx
   // WRONG
   export class TaskRepositoryImpl implements TaskRepository {
     async getAllTasks(): Promise<Task[]> {
       // Direct API calls without abstraction
       const response = await axios.get('http://api.example.com/tasks');
       return response.data.map(item => ({
         id: item.id,
         title: item.title,
         // ...
       }));
     }
   }
   ```

2. ❌ **Business Logic in Repositories**
   ```tsx
   // WRONG
   export class TaskRepositoryImpl implements TaskRepository {
     async createTask(task: Omit<Task, 'id'>): Promise<Task> {
       // Business validation belongs in domain layer
       if (task.title.length < 3) {
         throw new Error('Task title is too short');
       }
       
       // Business rule implementation belongs in domain
       if (task.priority === 'high' && !task.dueDate) {
         task = { ...task, dueDate: tomorrow() };
       }
       
       const response = await this.api.post('/tasks', task);
       return response.data;
     }
   }
   ```

3. ❌ **Hardcoded Configuration**
   ```tsx
   // WRONG
   export class ApiClient {
     private readonly client = axios.create({
       // Hardcoded configuration
       baseURL: 'https://api.example.com',
       timeout: 5000,
       headers: {
         'Authorization': 'Bearer 1234567890abcdef'
       }
     });
   }
   ```

## Correct Patterns

1. ✅ **Properly Abstracted Repository Class**
   ```tsx
   // CORRECT
   export class TaskRepositoryImpl implements TaskRepository {
     constructor(
       private readonly taskApi: TaskApi,
       private readonly taskMapper: TaskMapper
     ) {}
     
     async getAllTasks(): Promise<Task[]> {
       try {
         const apiResponse = await this.taskApi.getAllTasks();
         return apiResponse.map(item => this.taskMapper.mapToDomain(item));
       } catch (error) {
         // Translate to domain error
         if (error instanceof ApiError) {
           throw new TaskFetchError(error.message);
         }
         throw error;
       }
     }
   }
   ```

2. ✅ **Clean Mapper Class**
   ```tsx
   // CORRECT
   export class TaskMapper {
     static mapToDomain(apiModel: TaskApiModel): Task {
       return {
         id: apiModel.id,
         title: apiModel.title,
         description: apiModel.description || undefined,
         completed: Boolean(apiModel.completed),
         priority: this.mapPriority(apiModel.priority),
         createdAt: new Date(apiModel.created_at).toISOString(),
         dueDate: apiModel.due_date ? new Date(apiModel.due_date).toISOString() : null,
         tags: apiModel.tags || []
       };
     }
     
     static mapToApi(domainModel: Task): TaskApiModel {
       return {
         id: domainModel.id,
         title: domainModel.title,
         description: domainModel.description,
         completed: domainModel.completed,
         priority: domainModel.priority,
         created_at: domainModel.createdAt,
         due_date: domainModel.dueDate,
         tags: domainModel.tags
       };
     }
     
     private static mapPriority(apiPriority: string): 'high' | 'medium' | 'low' {
       switch (apiPriority.toLowerCase()) {
         case 'high': return 'high';
         case 'low': return 'low';
         default: return 'medium';
       }
     }
   }
   ```

3. ✅ **Properly Configured API Client Class**
   ```tsx
   // CORRECT
   export class ApiClient {
     constructor(
       private readonly config: ApiConfig,
       private readonly authService: AuthService
     ) {
       this.client = axios.create({
         baseURL: config.baseUrl,
         timeout: config.timeout || 10000,
         headers: { 'Content-Type': 'application/json' }
       });
       
       this.setupInterceptors();
     }
     
     private setupInterceptors(): void {
       this.client.interceptors.request.use(config => {
         const token = this.authService.getToken();
         if (token) {
           config.headers.Authorization = `Bearer ${token}`;
         }
         return config;
       });
     }
   }
   ```
