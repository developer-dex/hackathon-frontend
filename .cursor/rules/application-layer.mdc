---
description: 
globs: src/application/**/*.tsx,src/application/**/*.ts
alwaysApply: false
---
# Application Layer (Service/Use Case Layer)

## Overview
The Application Layer orchestrates interactions between the UI and data layers, contains application-specific business logic, and handles user actions. It serves as the bridge between what the user sees/interacts with and how the application processes/stores data.

## Directory Structure
```
src/
└── application/
    ├── useCases/     // Core application use cases (class-based or function-based)
    ├── services/     // Services that orchestrate multiple use cases
    ├── contexts/     // React context providers for state management
    └── hooks/        // Custom hooks that leverage use cases
```

## Strict Rules and Guidelines

### 1. Use Case Design

- **Implementation Options**
  - Use cases SHOULD be implemented as classes (preferred) or pure functions
  - Class-based use cases MUST follow the Single Responsibility Principle
  - Each use case MUST represent a single action or operation
  - Use cases MUST be named after the action they perform

- **Class-Based Structure**
  - Use cases SHOULD be defined as classes with clear interfaces
  - Each use case class SHOULD have a primary execute/run method
  - Use case classes SHOULD accept dependencies via constructor
  - Use case classes MUST be testable with mock dependencies
  - Use case classes SHOULD be stateless or have minimal state

- **Function-Based Structure** (Alternative)
  - Function use cases MUST be pure functions
  - Function use cases MUST receive all dependencies as parameters
  - Functions MUST be deterministic (same input = same output)
  - Use functions for simpler use cases with fewer dependencies

- **Dependencies**
  - Use cases MUST depend on interfaces defined in the Domain Layer
  - No direct instantiation of implementation classes within use cases
  - All dependencies SHOULD be injected
  - Use interfaces to define the required dependencies

- **Error Handling**
  - Use cases MUST return data or throw typed exceptions
  - Exceptions MUST be domain-specific and meaningful
  - Success and error paths MUST be clearly defined
  - Never use generic errors, always use business domain errors

- **Type Safety**
  - All inputs and outputs MUST be strongly typed
  - DTOs (Data Transfer Objects) SHOULD be used for data exchange
  - Type validation SHOULD happen at the boundaries

### 2. Context Design

- **Implementation Approach**
  - Context providers SHOULD use either class-based or function components
  - Class-based contexts can leverage OOP patterns for complex state management
  - Function-based contexts can use hooks like useState or useReducer
  - For complex domains, favor class-based approaches with clear abstractions

- **Domain Separation**
  - Create separate contexts for different domains (e.g., TaskContext, UserContext)
  - Contexts MUST NOT mix concerns from multiple domains
  - Each context MUST be in its own file or directory
  - Consider creating a base context class for common functionality

- **State Management**
  - Context providers MUST encapsulate use case calls
  - Context MUST expose:
    - State: The current application state for that domain
    - Actions: Functions that modify the state by calling use cases
    - Status: Loading, error, and success states
  - Class-based contexts SHOULD use a proper state management pattern
  - Function-based contexts SHOULD use React's useReducer for complex state

- **Error Handling**
  - Contexts MUST handle errors from use cases
  - Contexts MUST provide error state to components
  - Contexts SHOULD offer error recovery mechanisms
  - All async operations MUST handle both success and error paths

- **Initialization**
  - Contexts MUST have sensible initial states
  - Contexts SHOULD handle loading initial data if needed
  - Context initialization SHOULD be lazy when possible
  - Class-based contexts SHOULD have clear initialization methods

### 3. Hook Design

- **Custom Hook Rules**
  - Create custom hooks to abstract complex logic from components
  - Hooks MUST follow the 'use' naming convention (e.g., `useTasks`, `useAuthentication`)
  - Hooks SHOULD encapsulate one feature or aspect of the application
  - Hooks MUST NOT include UI rendering logic

- **Implementation Pattern**
  - Hooks SHOULD be function-based following React's Hooks API
  - Hooks can delegate to class-based services or use cases internally
  - For complex logic, hooks can be built from multiple simpler hooks
  - Consider creating hook factories for reusable hook patterns

- **Data Flow**
  - Hooks MUST call use cases/services/contexts
  - Hooks MUST NOT directly call repositories or API endpoints
  - Hooks SHOULD transform data to formats needed by components
  - Hooks SHOULD handle loading, error, and success states

- **Cleanup**
  - Hooks MUST clean up resources (subscriptions, timers, etc.)
  - Hooks MUST cancel pending operations when unmounted
  - Hooks SHOULD handle component lifecycle changes appropriately

### 4. Service Design

- **Implementation Approach**
  - Services SHOULD be implemented as classes with clear interfaces
  - Services SHOULD follow the SOLID principles
  - Each service SHOULD focus on a specific domain or cross-cutting concern
  - Services SHOULD have minimal state, preferring stateless design

- **Orchestration**
  - Services SHOULD coordinate multiple use cases
  - Services SHOULD handle cross-cutting concerns
  - Services SHOULD NOT contain business rules (those belong in the domain)
  - Services SHOULD be stateless when possible

- **Dependency Management**
  - Services MUST use dependency injection
  - Services MUST depend on abstractions, not implementations
  - Services SHOULD be easily testable
  - Services SHOULD use a consistent error handling strategy

## Implementation Examples

### Use Case Example (Class-Based - Preferred)

```tsx
// CreateTaskUseCase.ts
import { Task } from '@/domain/entities/Task';
import { TaskRepository } from '@/domain/interfaces/TaskRepository';
import { TaskValidator } from '@/domain/validators/TaskValidator';
import { InvalidTaskError } from '@/domain/errors/TaskErrors';

export interface CreateTaskParams {
  title: string;
  priority: string;
  dueDate?: string;
}

export class CreateTaskUseCase {
  constructor(private readonly taskRepository: TaskRepository) {}
  
  /**
   * Creates a new task with the provided details
   * 
   * @throws {InvalidTaskError} When task data is invalid
   * @throws {TaskRepositoryError} When task creation fails at the repository level
   */
  async execute(params: CreateTaskParams): Promise<Task> {
    const { title, priority, dueDate } = params;
    
    // Validate input data
    const validationErrors = TaskValidator.validateTaskCreation({ title, priority, dueDate });
    if (validationErrors.length > 0) {
      throw new InvalidTaskError(`Task validation failed: ${validationErrors.join(', ')}`);
    }
    
    // Prepare task data
    const newTask: Omit<Task, 'id'> = {
      title,
      priority: priority as 'high' | 'medium' | 'low',
      completed: false,
      createdAt: new Date().toISOString(),
      dueDate: dueDate || null,
      tags: []
    };
    
    // Persist to repository
    return await this.taskRepository.createTask(newTask);
  }
}

// Usage Example:
// const createTaskUseCase = new CreateTaskUseCase(taskRepository);
// const newTask = await createTaskUseCase.execute({ title: "New Task", priority: "high" });
```

### Use Case Example (Function-Based - Alternative)

```tsx
// createTaskUseCase.ts
import { Task } from '@/domain/entities/Task';
import { TaskRepository } from '@/domain/interfaces/TaskRepository';
import { TaskValidator } from '@/domain/validators/TaskValidator';
import { InvalidTaskError } from '@/domain/errors/TaskErrors';

/**
 * Creates a new task with the provided details
 * 
 * @throws {InvalidTaskError} When task data is invalid
 * @throws {TaskRepositoryError} When task creation fails at the repository level
 */
export const createTaskUseCase = async (
  taskRepository: TaskRepository,
  title: string,
  priority: string,
  dueDate?: string
): Promise<Task> => {
  // Validate input data
  const validationErrors = TaskValidator.validateTaskCreation({ title, priority, dueDate });
  if (validationErrors.length > 0) {
    throw new InvalidTaskError(`Task validation failed: ${validationErrors.join(', ')}`);
  }
  
  // Prepare task data
  const newTask: Omit<Task, 'id'> = {
    title,
    priority: priority as 'high' | 'medium' | 'low',
    completed: false,
    createdAt: new Date().toISOString(),
    dueDate: dueDate || null,
    tags: []
  };
  
  // Persist to repository
  return await taskRepository.createTask(newTask);
};
```

### Context Example (Class-Based)

```tsx
// TaskContext.tsx
import React, { createContext, useContext, ReactNode } from 'react';
import { Task } from '@/domain/entities/Task';
import { CreateTaskUseCase } from '../useCases/CreateTaskUseCase';
import { DeleteTaskUseCase } from '../useCases/DeleteTaskUseCase';
import { CompleteTaskUseCase } from '../useCases/CompleteTaskUseCase';
import { GetAllTasksUseCase } from '../useCases/GetAllTasksUseCase';
import { taskRepository } from '@/infrastructure/repositories/TaskRepository';
import { DomainError } from '@/domain/errors/DomainError';

// State type
interface TaskState {
  tasks: Task[];
  isLoading: boolean;
  error: Error | null;
}

// Context type
interface TaskContextType extends TaskState {
  fetchTasks: () => Promise<void>;
  createTask: (title: string, priority: string) => Promise<void>;
  deleteTask: (id: string) => Promise<void>;
  completeTask: (id: string) => Promise<void>;
}

// Create context
const TaskContext = createContext<TaskContextType | undefined>(undefined);

// TaskManager class to handle logic
class TaskManager {
  private state: TaskState = {
    tasks: [],
    isLoading: false,
    error: null
  };
  
  private useCases = {
    createTask: new CreateTaskUseCase(taskRepository),
    deleteTask: new DeleteTaskUseCase(taskRepository),
    completeTask: new CompleteTaskUseCase(taskRepository),
    getAllTasks: new GetAllTasksUseCase(taskRepository)
  };
  
  private setState: React.Dispatch<React.SetStateAction<TaskState>>;
  
  constructor(setState: React.Dispatch<React.SetStateAction<TaskState>>) {
    this.setState = setState;
  }
  
  async fetchTasks(): Promise<void> {
    this.setState({ ...this.state, isLoading: true, error: null });
    try {
      const tasks = await this.useCases.getAllTasks.execute();
      this.setState({ tasks, isLoading: false, error: null });
      // Update internal state
      this.state = { tasks, isLoading: false, error: null };
    } catch (error) {
      const errorObj = error instanceof Error ? error : new Error('Unknown error');
      this.setState({ ...this.state, isLoading: false, error: errorObj });
      // Update internal state
      this.state = { ...this.state, isLoading: false, error: errorObj };
    }
  }
  
  async createTask(title: string, priority: string): Promise<void> {
    this.setState({ ...this.state, isLoading: true, error: null });
    try {
      const newTask = await this.useCases.createTask.execute({ title, priority });
      const updatedTasks = [...this.state.tasks, newTask];
      this.setState({ tasks: updatedTasks, isLoading: false, error: null });
      // Update internal state
      this.state = { tasks: updatedTasks, isLoading: false, error: null };
    } catch (error) {
      const errorObj = error instanceof Error ? error : new Error('Unknown error');
      this.setState({ ...this.state, isLoading: false, error: errorObj });
      // Update internal state
      this.state = { ...this.state, isLoading: false, error: errorObj };
    }
  }
  
  async deleteTask(id: string): Promise<void> {
    try {
      await this.useCases.deleteTask.execute(id);
      const updatedTasks = this.state.tasks.filter(task => task.id !== id);
      this.setState({ ...this.state, tasks: updatedTasks });
      // Update internal state
      this.state = { ...this.state, tasks: updatedTasks };
    } catch (error) {
      const errorObj = error instanceof Error ? error : new Error('Unknown error');
      this.setState({ ...this.state, error: errorObj });
      // Update internal state
      this.state = { ...this.state, error: errorObj };
    }
  }
  
  async completeTask(id: string): Promise<void> {
    try {
      const updatedTask = await this.useCases.completeTask.execute(id);
      const updatedTasks = this.state.tasks.map(task => 
        task.id === updatedTask.id ? updatedTask : task
      );
      this.setState({ ...this.state, tasks: updatedTasks });
      // Update internal state
      this.state = { ...this.state, tasks: updatedTasks };
    } catch (error) {
      const errorObj = error instanceof Error ? error : new Error('Unknown error');
      this.setState({ ...this.state, error: errorObj });
      // Update internal state
      this.state = { ...this.state, error: errorObj };
    }
  }
}

// Provider component
export const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [state, setState] = React.useState<TaskState>({
    tasks: [],
    isLoading: false,
    error: null
  });
  
  // Create TaskManager instance
  const taskManagerRef = React.useRef<TaskManager | null>(null);
  if (!taskManagerRef.current) {
    taskManagerRef.current = new TaskManager(setState);
  }
  
  // Expose methods and state
  const contextValue: TaskContextType = {
    ...state,
    fetchTasks: () => taskManagerRef.current!.fetchTasks(),
    createTask: (title, priority) => taskManagerRef.current!.createTask(title, priority),
    deleteTask: (id) => taskManagerRef.current!.deleteTask(id),
    completeTask: (id) => taskManagerRef.current!.completeTask(id)
  };
  
  return (
    <TaskContext.Provider value={contextValue}>
      {children}
    </TaskContext.Provider>
  );
};

// Hook for consuming the context
export const useTasks = (): TaskContextType => {
  const context = useContext(TaskContext);
  if (!context) {
    throw new Error('useTasks must be used within a TaskProvider');
  }
  return context;
};
```

### Context Example (Function-Based - Alternative)

```tsx
// TaskContext.tsx (Function-based version)
import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { Task } from '@/domain/entities/Task';
import { createTaskUseCase } from '../useCases/createTaskUseCase';
import { deleteTaskUseCase } from '../useCases/deleteTaskUseCase';
import { completeTaskUseCase } from '../useCases/completeTaskUseCase';
import { getAllTasksUseCase } from '../useCases/getAllTasksUseCase';
import { taskRepository } from '@/infrastructure/repositories/TaskRepository';
import { DomainError } from '@/domain/errors/DomainError';

// State type
interface TaskState {
  tasks: Task[];
  isLoading: boolean;
  error: Error | null;
}

// Action types
type TaskAction = 
  | { type: 'FETCH_TASKS_REQUEST' }
  | { type: 'FETCH_TASKS_SUCCESS', payload: Task[] }
  | { type: 'FETCH_TASKS_FAILURE', payload: Error }
  | { type: 'CREATE_TASK_REQUEST' }
  | { type: 'CREATE_TASK_SUCCESS', payload: Task }
  | { type: 'CREATE_TASK_FAILURE', payload: Error }
  | { type: 'DELETE_TASK_SUCCESS', payload: string }
  | { type: 'COMPLETE_TASK_SUCCESS', payload: Task };

// Context type
interface TaskContextType extends TaskState {
  fetchTasks: () => Promise<void>;
  createTask: (title: string, priority: string) => Promise<void>;
  deleteTask: (id: string) => Promise<void>;
  completeTask: (id: string) => Promise<void>;
}

// Reducer function
const taskReducer = (state: TaskState, action: TaskAction): TaskState => {
  switch (action.type) {
    case 'FETCH_TASKS_REQUEST':
      return { ...state, isLoading: true, error: null };
    case 'FETCH_TASKS_SUCCESS':
      return { ...state, isLoading: false, tasks: action.payload };
    case 'FETCH_TASKS_FAILURE':
      return { ...state, isLoading: false, error: action.payload };
    case 'CREATE_TASK_REQUEST':
      return { ...state, isLoading: true, error: null };
    case 'CREATE_TASK_SUCCESS':
      return { 
        ...state, 
        isLoading: false, 
        tasks: [...state.tasks, action.payload] 
      };
    case 'CREATE_TASK_FAILURE':
      return { ...state, isLoading: false, error: action.payload };
    case 'DELETE_TASK_SUCCESS':
      return { 
        ...state, 
        tasks: state.tasks.filter(task => task.id !== action.payload) 
      };
    case 'COMPLETE_TASK_SUCCESS':
      return { 
        ...state, 
        tasks: state.tasks.map(task => 
          task.id === action.payload.id ? action.payload : task
        ) 
      };
    default:
      return state;
  }
};

// Create context
const TaskContext = createContext<TaskContextType | undefined>(undefined);

// Initial state
const initialState: TaskState = {
  tasks: [],
  isLoading: false,
  error: null
};

// Provider component
export const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(taskReducer, initialState);
  
  // Actions
  const fetchTasks = async () => {
    dispatch({ type: 'FETCH_TASKS_REQUEST' });
    try {
      const tasks = await getAllTasksUseCase(taskRepository);
      dispatch({ type: 'FETCH_TASKS_SUCCESS', payload: tasks });
    } catch (error) {
      dispatch({ 
        type: 'FETCH_TASKS_FAILURE', 
        payload: error instanceof Error ? error : new Error('Unknown error') 
      });
    }
  };
  
  const createTask = async (title: string, priority: string) => {
    dispatch({ type: 'CREATE_TASK_REQUEST' });
    try {
      const task = await createTaskUseCase(taskRepository, title, priority);
      dispatch({ type: 'CREATE_TASK_SUCCESS', payload: task });
    } catch (error) {
      dispatch({ 
        type: 'CREATE_TASK_FAILURE', 
        payload: error instanceof Error ? error : new Error('Unknown error') 
      });
    }
  };
  
  const deleteTask = async (id: string) => {
    try {
      await deleteTaskUseCase(taskRepository, id);
      dispatch({ type: 'DELETE_TASK_SUCCESS', payload: id });
    } catch (error) {
      // Handle error but no state change needed
      console.error('Error deleting task:', error);
    }
  };
  
  const completeTask = async (id: string) => {
    try {
      const updatedTask = await completeTaskUseCase(taskRepository, id);
      dispatch({ type: 'COMPLETE_TASK_SUCCESS', payload: updatedTask });
    } catch (error) {
      // Handle error but no state change needed
      console.error('Error completing task:', error);
    }
  };
  
  return (
    <TaskContext.Provider value={{ 
      ...state,
      fetchTasks,
      createTask,
      deleteTask,
      completeTask
    }}>
      {children}
    </TaskContext.Provider>
  );
};

// Hook for consuming the context
export const useTasks = (): TaskContextType => {
  const context = useContext(TaskContext);
  if (!context) {
    throw new Error('useTasks must be used within a TaskProvider');
  }
  return context;
};
```

### Service Example (Class-Based)

```tsx
// TaskService.ts
import { Task } from '@/domain/entities/Task';
import { CreateTaskUseCase } from '../useCases/CreateTaskUseCase';
import { CompleteTaskUseCase } from '../useCases/CompleteTaskUseCase';
import { GetTaskStatsUseCase } from '../useCases/GetTaskStatsUseCase';
import { NotifyTaskCreatedUseCase } from '../useCases/NotifyTaskCreatedUseCase';

// Responsible for orchestrating task-related operations
export class TaskService {
  constructor(
    private readonly createTaskUseCase: CreateTaskUseCase,
    private readonly completeTaskUseCase: CompleteTaskUseCase,
    private readonly getTaskStatsUseCase: GetTaskStatsUseCase,
    private readonly notifyTaskCreatedUseCase: NotifyTaskCreatedUseCase
  ) {}
  
  /**
   * Creates a task and sends notification if it's a high priority task
   */
  async createTaskWithNotification(
    title: string, 
    priority: string, 
    dueDate?: string
  ): Promise<Task> {
    // Create the task
    const newTask = await this.createTaskUseCase.execute({ 
      title, 
      priority, 
      dueDate 
    });
    
    // If it's high priority, send a notification
    if (priority === 'high') {
      await this.notifyTaskCreatedUseCase.execute({
        taskId: newTask.id,
        taskTitle: newTask.title,
        priority
      });
    }
    
    return newTask;
  }
  
  /**
   * Completes a task and returns updated statistics
   */
  async completeTaskAndGetStats(taskId: string): Promise<{
    task: Task;
    completionRate: number;
    remainingTasks: number;
  }> {
    // Complete the task
    const updatedTask = await this.completeTaskUseCase.execute(taskId);
    
    // Get updated stats
    const stats = await this.getTaskStatsUseCase.execute();
    
    return {
      task: updatedTask,
      completionRate: stats.completionRate,
      remainingTasks: stats.remainingTasks
    };
  }
}
```

### Hook Example

```tsx
// useTaskManagement.ts
import { useState, useEffect, useCallback } from 'react';
import { Task } from '@/domain/entities/Task';
import { useTasks } from '../contexts/TaskContext';

export interface TaskManagement {
  tasks: Task[];
  filteredTasks: Task[];
  completedCount: number;
  pendingCount: number;
  isLoading: boolean;
  error: Error | null;
  filter: 'all' | 'completed' | 'pending';
  setFilter: (filter: 'all' | 'completed' | 'pending') => void;
  addTask: (title: string, priority: string) => Promise<void>;
  removeTask: (id: string) => Promise<void>;
  markAsComplete: (id: string) => Promise<void>;
  refreshTasks: () => Promise<void>;
}

export const useTaskManagement = (): TaskManagement => {
  const { tasks, isLoading, error, fetchTasks, createTask, deleteTask, completeTask } = useTasks();
  const [filter, setFilter] = useState<'all' | 'completed' | 'pending'>('all');
  
  // Filter tasks based on current filter
  const filteredTasks = tasks.filter(task => {
    if (filter === 'all') return true;
    if (filter === 'completed') return task.completed;
    return !task.completed;
  });
  
  // Calculate stats
  const completedCount = tasks.filter(task => task.completed).length;
  const pendingCount = tasks.length - completedCount;
  
  // Load tasks on mount
  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);
  
  // Wrapper functions with error handling
  const addTask = useCallback(async (title: string, priority: string) => {
    await createTask(title, priority);
  }, [createTask]);
  
  const removeTask = useCallback(async (id: string) => {
    await deleteTask(id);
  }, [deleteTask]);
  
  const markAsComplete = useCallback(async (id: string) => {
    await completeTask(id);
  }, [completeTask]);
  
  const refreshTasks = useCallback(async () => {
    await fetchTasks();
  }, [fetchTasks]);
  
  return {
    tasks,
    filteredTasks,
    completedCount,
    pendingCount,
    isLoading,
    error,
    filter,
    setFilter,
    addTask,
    removeTask,
    markAsComplete,
    refreshTasks
  };
};
```

## Anti-Patterns to Avoid

1. ❌ **Direct API Calls in Use Cases**
   ```tsx
   // WRONG
   export class CreateTaskUseCase {
     async execute(title: string): Promise<Task> {
       // Direct API call in use case
       const response = await axios.post('/api/tasks', { title });
       return response.data;
     }
   }
   ```

2. ❌ **Business Logic in Contexts**
   ```tsx
   // WRONG
   export const TaskProvider = ({ children }) => {
     // Business validation in the context
     const createTask = async (title) => {
       if (title.length < 3) {
         throw new Error("Title too short");
       }
       // ...
     };
     
     // ...
   };
   ```

3. ❌ **UI Logic in Application Layer**
   ```tsx
   // WRONG
   export class TaskService {
     showSuccessNotification(message) {
       // UI concern in application layer
       toast.success(message);
     }
     
     async createTask(title) {
       const task = await this.taskRepository.createTask({ title });
       this.showSuccessNotification("Task created!");
       return task;
     }
   }
   ```

## Correct Patterns

1. ✅ **Clean Use Case Class**
   ```tsx
   // CORRECT
   export class CreateTaskUseCase {
     constructor(private readonly taskRepository: TaskRepository) {}
     
     async execute(params: CreateTaskParams): Promise<Task> {
       // Validate
       this.validateInput(params);
       
       // Transform
       const taskData = this.prepareTaskData(params);
       
       // Execute
       return await this.taskRepository.createTask(taskData);
     }
     
     private validateInput(params: CreateTaskParams): void {
       const errors = TaskValidator.validateTaskCreation(params);
       if (errors.length > 0) {
         throw new InvalidTaskError(errors.join(', '));
       }
     }
     
     private prepareTaskData(params: CreateTaskParams): Omit<Task, 'id'> {
       return {
         title: params.title,
         priority: params.priority as 'high' | 'medium' | 'low',
         completed: false,
         createdAt: new Date().toISOString(),
         dueDate: params.dueDate || null,
         tags: []
       };
     }
   }
   ```

2. ✅ **Proper Service Class**
   ```tsx
   // CORRECT
   export class TaskService {
     constructor(
       private readonly createTaskUseCase: CreateTaskUseCase,
       private readonly notificationService: NotificationService
     ) {}
     
     async createHighPriorityTask(title: string): Promise<Task> {
       // Use the use case
       const task = await this.createTaskUseCase.execute({
         title,
         priority: 'high'
       });
       
       // Orchestrate additional actions
       await this.notificationService.notifyAdmins(`New high priority task: ${title}`);
       
       return task;
     }
   }
   ```

3. ✅ **Clean React Context with Class Pattern**
   ```tsx
   // CORRECT
   export class TaskManager {
     constructor(
       private readonly useCases: {
         createTask: CreateTaskUseCase;
         deleteTask: DeleteTaskUseCase;
       },
       private setState: React.Dispatch<React.SetStateAction<TaskState>>
     ) {}
     
     async createTask(title: string, priority: string): Promise<void> {
       try {
         this.setState((prevState) => ({ ...prevState, isLoading: true }));
         const newTask = await this.useCases.createTask.execute({ title, priority });
         this.setState((prevState) => ({
           ...prevState,
           isLoading: false,
           tasks: [...prevState.tasks, newTask]
         }));
       } catch (error) {
         this.setState((prevState) => ({
           ...prevState,
           isLoading: false,
           error: error instanceof Error ? error : new Error('Unknown error')
         }));
       }
     }
     
     // Other methods...
   }
   
   export const TaskProvider: React.FC = ({ children }) => {
     const [state, setState] = useState<TaskState>(initialState);
     const taskManager = useRef<TaskManager>(new TaskManager(useCases, setState));
     
     // Expose context
     return (
       <TaskContext.Provider value={{
         ...state,
         createTask: (...args) => taskManager.current.createTask(...args),
         // Other methods...
       }}>
         {children}
       </TaskContext.Provider>
     );
   };
   ```
